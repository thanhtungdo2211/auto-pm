from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import Optional
import uvicorn
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="Mockup Chatbot API",
    description="Mockup server for testing chatbot integration",
    version="1.0.0"
)

# Request/Response Models
class ChatRequest(BaseModel):
    user_id: int
    query: str
    file: str = ""

class ChatResponse(BaseModel):
    user_id: int
    query: str
    response: str

# Mockup responses based on query type
MOCKUP_RESPONSES = {
    "greeting": [
        "Ch√†o b·∫°n! R·∫•t vui ƒë∆∞·ª£c tr√≤ chuy·ªán v·ªõi b·∫°n. B·∫°n c√≥ kh·ªèe kh√¥ng? B·∫°n mu·ªën n√≥i v·ªÅ ƒëi·ªÅu g√¨ h√¥m nay?",
        "Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?",
        "Hello! T√¥i l√† chatbot h·ªó tr·ª£ qu·∫£n l√Ω d·ª± √°n. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨?"
    ],
    "file_wbs": """‚úÖ ƒê√£ ph√¢n t√≠ch WBS th√†nh c√¥ng!

üìä **T·ªïng quan d·ª± √°n:**
- T·ªïng s·ªë tasks: {task_count}
- T·ªïng th·ªùi gian d·ª± ki·∫øn: {total_days} ng√†y
- S·ªë th√†nh vi√™n c·∫ßn: {member_count} ng∆∞·ªùi

üìù **Danh s√°ch tasks ƒë√£ t·∫°o:**
{tasks_list}

T√¥i ƒë√£ t·∫°o c√°c tasks trong h·ªá th·ªëng. B·∫°n c√≥ th·ªÉ:
- G√µ "xem tasks" ƒë·ªÉ xem chi ti·∫øt
- G√µ "ph√¢n c√¥ng" ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n c√¥ng c√¥ng vi·ªác
- G√µ "timeline" ƒë·ªÉ xem timeline d·ª± √°n""",
    
    "default": "T√¥i hi·ªÉu b·∫°n mu·ªën bi·∫øt v·ªÅ '{query}'. Tuy nhi√™n, t√¥i c·∫ßn th√™m th√¥ng tin ƒë·ªÉ c√≥ th·ªÉ h·ªó tr·ª£ t·ªët h∆°n. B·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n ƒë∆∞·ª£c kh√¥ng?"
}

def detect_query_type(query: str, file: str) -> str:
    """Detect type of query to return appropriate response"""
    query_lower = query.lower().strip()
    
    # Check if file content (WBS processing)
    if file and len(file) > 0:
        return "file_wbs"
    
    # Check for greetings
    greeting_keywords = ["xin ch√†o", "ch√†o", "hello", "hi", "hey"]
    if any(keyword in query_lower for keyword in greeting_keywords):
        return "greeting"
    
    return "default"

def parse_wbs_file(file_content: str) -> dict:
    """Parse WBS file content and extract tasks"""
    tasks = []
    total_days = 0
    
    lines = file_content.strip().split('\n')
    for i, line in enumerate(lines[:10], 1):  # Limit to first 10 tasks for mockup
        parts = line.split(',')
        if len(parts) >= 3:
            task_name = parts[0].strip()
            assignee = parts[1].strip() if parts[1] else "Ch∆∞a ph√¢n c√¥ng"
            days_str = parts[2].strip()
            
            # Extract days from string (e.g., "5 days" -> 5)
            try:
                days = int(''.join(filter(str.isdigit, days_str)))
                total_days += days
            except:
                days = 1
            
            tasks.append(f"{i}. {task_name} - {assignee} ({days} ng√†y)")
    
    return {
        "task_count": len(tasks),
        "total_days": total_days,
        "member_count": min(len(tasks) // 2 + 1, 5),  # Mockup calculation
        "tasks_list": "\n".join(tasks) if tasks else "Kh√¥ng t√¨m th·∫•y tasks"
    }

def generate_response(query: str, file: str, user_id: int) -> str:
    """Generate mockup response based on query type"""
    query_type = detect_query_type(query, file)
    
    logger.info(f"User {user_id} | Query type: {query_type} | Query: {query[:50]}... | File: {len(file)} chars")
    
    if query_type == "file_wbs":
        # Parse WBS file and generate response
        wbs_data = parse_wbs_file(file)
        response = MOCKUP_RESPONSES["file_wbs"].format(**wbs_data)
        return response
    
    elif query_type == "greeting":
        import random
        return random.choice(MOCKUP_RESPONSES["greeting"])
    
    else:
        return MOCKUP_RESPONSES["default"].format(query=query)

@app.post("/chat", response_model=ChatResponse)
async def chat_endpoint(request: ChatRequest):
    """
    Chat endpoint that mimics chatbot behavior
    
    - **user_id**: User ID (integer)
    - **query**: User's message/query
    - **file**: File content as string (optional, for WBS processing)
    """
    try:
        logger.info(f"üì• Request from user {request.user_id}")
        logger.info(f"   Query: {request.query[:100]}...")
        logger.info(f"   File: {len(request.file)} chars")
        
        # Generate response
        response_text = generate_response(
            query=request.query,
            file=request.file,
            user_id=request.user_id
        )
        
        logger.info(f"‚úÖ Response generated: {response_text[:100]}...")
        
        return ChatResponse(
            user_id=request.user_id,
            query=request.query,
            response=response_text + "---" + request.file
        )
    
    except Exception as e:
        logger.error(f"‚ùå Error processing request: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")

@app.get("/")
async def root():
    """Root endpoint with API info"""
    return {
        "message": "Mockup Chatbot API",
        "version": "1.0.0",
        "docs": "/docs",
        "endpoints": {
            "chat": "/chat (POST)"
        }
    }

@app.get("/health")
async def health():
    """Health check endpoint"""
    return {"status": "healthy", "service": "mockup-chatbot"}

# Test examples endpoint
@app.get("/examples")
async def examples():
    """Get example requests"""
    return {
        "text_only": {
            "user_id": 123,
            "query": "Xin ch√†o",
            "file": ""
        },
        "wbs_file": {
            "user_id": 456,
            "query": "",
            "file": "Task 1,Frontend,5 days\nTask 2,Backend,7 days\nTask 3,Testing,3 days"
        },
        "with_query_and_file": {
            "user_id": 789,
            "query": "Ph√¢n t√≠ch WBS n√†y",
            "file": "Setup Environment,DevOps,2 days\nDatabase Design,Backend,4 days"
        }
    }

if __name__ == "__main__":
    # Run server
    print("üöÄ Starting Mockup Chatbot Server...")
    print("üìñ Docs: http://localhost:3030/docs")
    print("üè• Health: http://localhost:3030/health")
    print("üìù Examples: http://localhost:3030/examples")
    
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=3030,
        log_level="info"
    )